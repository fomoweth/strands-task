{
  "language": "Solidity",
  "sources": {
    "contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IERC20 {\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    function allowance(\n        address owner,\n        address spender\n    ) external view returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "contracts/interfaces/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\n\ninterface IERC20Metadata is IERC20 {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/interfaces/IWETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IERC20Metadata.sol\";\n\ninterface IWETH is IERC20Metadata {\n    function deposit() external payable;\n\n    function withdraw(uint256 amount) external;\n}\n"
    },
    "contracts/libraries/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nlibrary SafeERC20 {\n    bytes4 private constant APPROVE_SELECTOR = 0x095ea7b3;\n    bytes4 private constant TRANSFER_SELECTOR = 0xa9059cbb;\n    bytes4 private constant TRANSFER_FROM_SELECTOR = 0x23b872dd;\n\n    bytes4 private constant INVALID_TOKEN = 0xc1ab6dc1;\n    bytes4 private constant INVALID_MSG_VALUE = 0x78f38f76;\n    bytes4 private constant ZERO_ADDRESS = 0xd92e233d;\n    bytes4 private constant ZERO_VALUE = 0x7c946ed7;\n\n    function safeApprove(\n        address token,\n        address spender,\n        uint256 value\n    ) internal {\n        if (!_tryApprove(token, spender, value)) {\n            if (\n                !_tryApprove(token, spender, 0) ||\n                !_tryApprove(token, spender, value)\n            ) {\n                reRevert();\n            }\n        }\n    }\n\n    function _tryApprove(\n        address token,\n        address spender,\n        uint256 value\n    ) private returns (bool) {\n        if (!isNative(token)) {\n            return _call(token, APPROVE_SELECTOR, spender, value);\n        }\n\n        return true;\n    }\n\n    function safeTransfer(\n        address token,\n        address recipient,\n        uint256 value\n    ) internal {\n        if (!isNative(token)) {\n            if (!_call(token, TRANSFER_SELECTOR, recipient, value)) {\n                reRevert();\n            }\n        } else {\n            safeTransferNative(recipient, value);\n        }\n    }\n\n    function safeTransferNative(address recipient, uint256 value) internal {\n        assembly (\"memory-safe\") {\n            if iszero(recipient) {\n                mstore(0, ZERO_ADDRESS)\n                revert(0, 4)\n            }\n\n            if iszero(value) {\n                mstore(0, ZERO_VALUE)\n                revert(0, 4)\n            }\n\n            if iszero(call(gas(), recipient, value, 0, 0, 0, 0)) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n        }\n    }\n\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        assembly (\"memory-safe\") {\n            if iszero(extcodesize(token)) {\n                mstore(0, INVALID_TOKEN)\n                revert(0, 4)\n            }\n\n            if or(iszero(from), iszero(to)) {\n                mstore(0, ZERO_ADDRESS)\n                revert(0, 4)\n            }\n\n            let ptr := mload(0x40)\n\n            mstore(ptr, TRANSFER_FROM_SELECTOR)\n            mstore(add(ptr, 0x04), from)\n            mstore(add(ptr, 0x24), to)\n            mstore(add(ptr, 0x44), value)\n\n            let success := and(\n                or(\n                    and(eq(mload(0x00), 0x01), gt(returndatasize(), 0x1f)),\n                    iszero(returndatasize())\n                ),\n                call(gas(), token, 0, ptr, 0x64, 0, 0x20)\n            )\n\n            if iszero(success) {\n                returndatacopy(0, 0, returndatasize())\n                revert(0, returndatasize())\n            }\n        }\n    }\n\n    function _call(\n        address token,\n        bytes4 selector,\n        address account,\n        uint256 value\n    ) private returns (bool success) {\n        assembly (\"memory-safe\") {\n            if iszero(extcodesize(token)) {\n                mstore(0, INVALID_TOKEN)\n                revert(0, 4)\n            }\n\n            if iszero(account) {\n                mstore(0, ZERO_ADDRESS)\n                revert(0, 4)\n            }\n\n            let ptr := mload(0x40)\n\n            mstore(ptr, selector)\n            mstore(add(ptr, 0x04), account)\n            mstore(add(ptr, 0x24), value)\n\n            success := and(\n                or(\n                    and(eq(mload(0), 1), gt(returndatasize(), 0x1f)),\n                    iszero(returndatasize())\n                ),\n                call(gas(), token, 0, ptr, 0x44, 0, 0x20)\n            )\n        }\n    }\n\n    function isNative(address token) internal pure returns (bool value) {\n        assembly (\"memory-safe\") {\n            value := or(\n                eq(token, 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE),\n                iszero(token)\n            )\n        }\n    }\n\n    function reRevert() private pure {\n        assembly (\"memory-safe\") {\n            let ptr := mload(0x40)\n            returndatacopy(ptr, 0, returndatasize())\n            revert(ptr, returndatasize())\n        }\n    }\n}\n"
    },
    "contracts/Lock.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.9;\n\n// Uncomment this line to use console.log\n// import \"hardhat/console.sol\";\n\ncontract Lock {\n    uint public unlockTime;\n    address payable public owner;\n\n    event Withdrawal(uint amount, uint when);\n\n    constructor(uint _unlockTime) payable {\n        require(\n            block.timestamp < _unlockTime,\n            \"Unlock time should be in the future\"\n        );\n\n        unlockTime = _unlockTime;\n        owner = payable(msg.sender);\n    }\n\n    function withdraw() public {\n        // Uncomment this line, and the import of \"hardhat/console.sol\", to print a log in your terminal\n        // console.log(\"Unlock time is %o and block timestamp is %o\", unlockTime, block.timestamp);\n\n        require(block.timestamp >= unlockTime, \"You can't withdraw yet\");\n        require(msg.sender == owner, \"You aren't the owner\");\n\n        emit Withdrawal(address(this).balance, block.timestamp);\n\n        owner.transfer(address(this).balance);\n    }\n}\n"
    },
    "contracts/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./libraries/SafeERC20.sol\";\n\ncontract TransferHelper {\n    using SafeERC20 for address;\n\n    error InvalidToken();\n    error ZeroAddress();\n    error ZeroValue();\n\n    constructor() {}\n\n    function transferToken(\n        address token,\n        address recipient,\n        uint256 value\n    ) external {\n        token.safeTransferFrom(msg.sender, recipient, value);\n    }\n\n    function transferEth(address recipient) external payable {\n        recipient.safeTransferNative(msg.value);\n    }\n}\n"
    }
  },
  "settings": {
    "viaIR": true,
    "evmVersion": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 1000000
    },
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}