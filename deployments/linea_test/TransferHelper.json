{
  "address": "0xaE778109BAfe1e62bEa36AF14eE00Ed437BBF2A7",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroValue",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "transferEth",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transferToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xba54b89ecd8a16818b525a287dbf4f6db49dd066417b39d601ab6e6809f984f9",
  "receipt": {
    "to": null,
    "from": "0x48342a621F86833a9577D6277f8AD675D787cBF4",
    "contractAddress": "0xaE778109BAfe1e62bEa36AF14eE00Ed437BBF2A7",
    "transactionIndex": 12,
    "gasUsed": "174237",
    "logsBloom": "0x
    "blockHash": "0xaee20ef4973d71812ddda3732a8b3b1a6923fe219b22c99e8273bc037cb1eba4",
    "transactionHash": "0xba54b89ecd8a16818b525a287dbf4f6db49dd066417b39d601ab6e6809f984f9",
    "logs": [],
    "blockNumber": 1307077,
    "cumulativeGasUsed": "426237",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "bc6079aac9878d1fc99c3a22e1e90996",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroValue\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"transferEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TransferHelper.sol\":\"TransferHelper\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./libraries/SafeERC20.sol\\\";\\n\\ncontract TransferHelper {\\n    using SafeERC20 for address;\\n\\n    error InvalidToken();\\n    error ZeroAddress();\\n    error ZeroValue();\\n\\n    constructor() {}\\n\\n    function transferToken(\\n        address token,\\n        address recipient,\\n        uint256 value\\n    ) external {\\n        token.safeTransferFrom(msg.sender, recipient, value);\\n    }\\n\\n    function transferEth(address recipient) external payable {\\n        recipient.safeTransferNative(msg.value);\\n    }\\n}\\n\",\"keccak256\":\"0x827a340fde7ce10594ec029917b1fb501f4ac18c094bafea03fab62b7516f3f5\",\"license\":\"MIT\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary SafeERC20 {\\n    bytes4 private constant APPROVE_SELECTOR = 0x095ea7b3;\\n    bytes4 private constant TRANSFER_SELECTOR = 0xa9059cbb;\\n    bytes4 private constant TRANSFER_FROM_SELECTOR = 0x23b872dd;\\n\\n    bytes4 private constant INVALID_TOKEN = 0xc1ab6dc1;\\n    bytes4 private constant INVALID_MSG_VALUE = 0x78f38f76;\\n    bytes4 private constant ZERO_ADDRESS = 0xd92e233d;\\n    bytes4 private constant ZERO_VALUE = 0x7c946ed7;\\n\\n    function safeApprove(\\n        address token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        if (!_tryApprove(token, spender, value)) {\\n            if (\\n                !_tryApprove(token, spender, 0) ||\\n                !_tryApprove(token, spender, value)\\n            ) {\\n                reRevert();\\n            }\\n        }\\n    }\\n\\n    function _tryApprove(\\n        address token,\\n        address spender,\\n        uint256 value\\n    ) private returns (bool) {\\n        if (!isNative(token)) {\\n            return _call(token, APPROVE_SELECTOR, spender, value);\\n        }\\n\\n        return true;\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address recipient,\\n        uint256 value\\n    ) internal {\\n        if (!isNative(token)) {\\n            if (!_call(token, TRANSFER_SELECTOR, recipient, value)) {\\n                reRevert();\\n            }\\n        } else {\\n            safeTransferNative(recipient, value);\\n        }\\n    }\\n\\n    function safeTransferNative(address recipient, uint256 value) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            if iszero(recipient) {\\n                mstore(0, ZERO_ADDRESS)\\n                revert(0, 4)\\n            }\\n\\n            if iszero(value) {\\n                mstore(0, ZERO_VALUE)\\n                revert(0, 4)\\n            }\\n\\n            if iszero(call(gas(), recipient, value, 0, 0, 0, 0)) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n        }\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            if iszero(extcodesize(token)) {\\n                mstore(0, INVALID_TOKEN)\\n                revert(0, 4)\\n            }\\n\\n            if or(iszero(from), iszero(to)) {\\n                mstore(0, ZERO_ADDRESS)\\n                revert(0, 4)\\n            }\\n\\n            let ptr := mload(0x40)\\n\\n            mstore(ptr, TRANSFER_FROM_SELECTOR)\\n            mstore(add(ptr, 0x04), from)\\n            mstore(add(ptr, 0x24), to)\\n            mstore(add(ptr, 0x44), value)\\n\\n            let success := and(\\n                or(\\n                    and(eq(mload(0x00), 0x01), gt(returndatasize(), 0x1f)),\\n                    iszero(returndatasize())\\n                ),\\n                call(gas(), token, 0, ptr, 0x64, 0, 0x20)\\n            )\\n\\n            if iszero(success) {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    function _call(\\n        address token,\\n        bytes4 selector,\\n        address account,\\n        uint256 value\\n    ) private returns (bool success) {\\n        assembly (\\\"memory-safe\\\") {\\n            if iszero(extcodesize(token)) {\\n                mstore(0, INVALID_TOKEN)\\n                revert(0, 4)\\n            }\\n\\n            if iszero(account) {\\n                mstore(0, ZERO_ADDRESS)\\n                revert(0, 4)\\n            }\\n\\n            let ptr := mload(0x40)\\n\\n            mstore(ptr, selector)\\n            mstore(add(ptr, 0x04), account)\\n            mstore(add(ptr, 0x24), value)\\n\\n            success := and(\\n                or(\\n                    and(eq(mload(0), 1), gt(returndatasize(), 0x1f)),\\n                    iszero(returndatasize())\\n                ),\\n                call(gas(), token, 0, ptr, 0x44, 0, 0x20)\\n            )\\n        }\\n    }\\n\\n    function isNative(address token) internal pure returns (bool value) {\\n        assembly (\\\"memory-safe\\\") {\\n            value := or(\\n                eq(token, 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE),\\n                iszero(token)\\n            )\\n        }\\n    }\\n\\n    function reRevert() private pure {\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            returndatacopy(ptr, 0, returndatasize())\\n            revert(ptr, returndatasize())\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc65c1b70d31fb52cffb1b861efe6a3de4b906cd2744c14a9f70469aeb7d60a1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657610237908161001c8239f35b600080fdfe608060405260048036101561001357600080fd5b600090813560e01c806330df47af146101545763f5537ede1461003557600080fd5b346101505760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101505761006c610202565b60243573ffffffffffffffffffffffffffffffffffffffff8116810361014c57813b156101255780153315176100fe57602092848093606493604051937f23b872dd0000000000000000000000000000000000000000000000000000000085523390850152602484015260443560448401525af13d15601f3d116001845114161716156100f65780f35b3d81803e3d90fd5b82847fd92e233d000000000000000000000000000000000000000000000000000000008152fd5b82847fc1ab6dc1000000000000000000000000000000000000000000000000000000008152fd5b8380fd5b5080fd5b509060207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101ff57610188610202565b9182156101d95734156101b35750808080809434905af1156101a75780f35b604051903d90823e3d90fd5b907f7c946ed7000000000000000000000000000000000000000000000000000000008152fd5b907fd92e233d000000000000000000000000000000000000000000000000000000008152fd5b80fd5b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361022557565b600080fdfea164736f6c6343000811000a",
  "deployedBytecode": "0x608060405260048036101561001357600080fd5b600090813560e01c806330df47af146101545763f5537ede1461003557600080fd5b346101505760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101505761006c610202565b60243573ffffffffffffffffffffffffffffffffffffffff8116810361014c57813b156101255780153315176100fe57602092848093606493604051937f23b872dd0000000000000000000000000000000000000000000000000000000085523390850152602484015260443560448401525af13d15601f3d116001845114161716156100f65780f35b3d81803e3d90fd5b82847fd92e233d000000000000000000000000000000000000000000000000000000008152fd5b82847fc1ab6dc1000000000000000000000000000000000000000000000000000000008152fd5b8380fd5b5080fd5b509060207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101ff57610188610202565b9182156101d95734156101b35750808080809434905af1156101a75780f35b604051903d90823e3d90fd5b907f7c946ed7000000000000000000000000000000000000000000000000000000008152fd5b907fd92e233d000000000000000000000000000000000000000000000000000000008152fd5b80fd5b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361022557565b600080fdfea164736f6c6343000811000a",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}